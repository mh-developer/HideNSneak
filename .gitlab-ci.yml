image: docker:latest

variables:
  SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
  GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task

stages:
  - Build
  - Test
  - Deploy

build-backend:
  stage: Build
  services:
    - docker:dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker build --pull -t "$CI_REGISTRY_IMAGE:latest-api" ./HideNSneak.Api
    - docker push "$CI_REGISTRY_IMAGE:latest-api"
  only:
    - master

build-development-backend:
  stage: Build
  services:
    - docker:dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker build --pull -t "$CI_REGISTRY_IMAGE:latest-development-api" ./HideNSneak.Api
    - docker push "$CI_REGISTRY_IMAGE:latest-development-api"
  only:
    - development

build-frontend:
  stage: Build
  services:
    - docker:dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker build --pull -t "$CI_REGISTRY_IMAGE:latest-ui" ./HideNSneak.UI
    - docker push "$CI_REGISTRY_IMAGE:latest-ui"
  only:
    - master

build-development-frontend:
  stage: Build
  services:
    - docker:dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker build --pull -t "$CI_REGISTRY_IMAGE:latest-development-ui" ./HideNSneak.UI
    - docker push "$CI_REGISTRY_IMAGE:latest-development-ui"
  only:
    - development

sonarcloud-check:
  stage: Test
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - sonar-scanner
  allow_failure: true
  only:
    - merge_requests
    - master
    - development

deploy-api:
  stage: Deploy
  services:
  - docker:dind
  script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - docker pull "$CI_REGISTRY_IMAGE:latest-api"
    - docker tag "$CI_REGISTRY_IMAGE:latest-api" "registry.heroku.com/$HEROKU_HIDENSNEAK_API/web:latest"
    - docker login -u "$HEROKU_ACC" -p "$HEROKU_API_KEY" registry.heroku.com
    - docker push "registry.heroku.com/$HEROKU_HIDENSNEAK_API/web:latest"
    - docker run --rm -e HEROKU_API_KEY=$HEROKU_API_KEY wingrunr21/alpine-heroku-cli container:release web --app $HEROKU_HIDENSNEAK_API
  only:
    - master

deploy-development-api:
  stage: Deploy
  services:
  - docker:dind
  script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - docker pull "$CI_REGISTRY_IMAGE:latest-development-api"
    - docker tag "$CI_REGISTRY_IMAGE:latest-development-api" "registry.heroku.com/$HEROKU_HIDENSNEAK_API/web:latest"
    - docker login -u "$HEROKU_ACC" -p "$HEROKU_API_KEY" registry.heroku.com
    - docker push "registry.heroku.com/$HEROKU_HIDENSNEAK_API/web:latest"
    - docker run --rm -e HEROKU_API_KEY=$HEROKU_API_KEY wingrunr21/alpine-heroku-cli container:release web --app $HEROKU_HIDENSNEAK_API
  only:
    - development

deploy-ui:
  stage: Deploy
  image: node:lts-alpine
  script:
    - cd ./HideNSneak.UI
    - npm install
    - npm install -g firebase-tools
    - npm run build:ionic
    - firebase deploy --only hosting:hidensneak --token "$FIREBASE_TOKEN"
  only:
    - master
    - development
